$regkey = '<%= @regkey %>'
$purge  = '<%= @purge %>'
$count  = <%= @ace_hash.length %>

# This var used as an exit value - 0 by default (do nothing)
$exit_value = 0

$ACL = Get-ACL $regkey
$ACEs = $ACL.GetAccessRules($true,$true,[System.Security.Principal.NTAccount])

# Test if there are more ACEs then we've defined.  If yes; we need to re-apply
# the ACL since there are more then we defined.
if (($purge -eq 'true') -and ($ACEs.count -ne $count)) { exit 1 }


# For each ACE defined; is it already there?
<% @ace_hash.each do |key,hash| -%>
$secPrincipal    = '<%= hash['secprincipal'] %>'
$InheritanceFlag = [System.Security.AccessControl.InheritanceFlags]::<%= hash['inheritance'] %>
$PropagationFlag = [System.Security.AccessControl.PropagationFlags]::<%= hash['propagation'] %>
$objAccess       = [System.Security.AccessControl.RegistryRights]<%= hash['objaccess'] %>
$objType         = [System.Security.AccessControl.AccessControlType]::<%= hash['objtype'] %>
$remove_ace      = '<%= hash['remove_ace'] %>'

$ACEsMatching = $ACEs |Where {
  $_.RegistryRights    -eq $objAccess       -and
  $_.IdentityReference -eq $secPrincipal    -and
  $_.AccessControlType -eq $objType         -and
  $_.InheritanceFlags  -eq $InheritanceFlag -and
  $_.PropagationFlags  -eq $PropagationFlag
}

# Increment exit_value if we don't find the ACEs we are expecting
if($ACEsMatching.Count -eq 0) {
  if ($remove_ace -ne 'true') { $exit_value++ }
} else {
  if ($remove_ace -eq 'true') { $exit_value++ }
}
<% end -%>

# Exit based on results
exit $exit_value

